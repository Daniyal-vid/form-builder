generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  forms    Form[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Form {
  id          String      @id @default(cuid())
  title       String
  description String?
  shareId     String      @unique
  status      FormStatus  @default(ACTIVE)
  fields      Json        // Store form schema as JSON
  settings    Json?       // Form settings (thank you message, etc.)
  userId      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  submissions Submission[]

  @@map("forms")
}

model Submission {
  id         String           @id @default(cuid())
  data       Json             // Submission data
  metadata   Json?            // IP, user agent, etc.
  status     SubmissionStatus @default(NEW)
  formId     String
  createdAt  DateTime         @default(now())

  form Form @relation(fields: [formId], references: [id], onDelete: Cascade)

  @@map("submissions")
}

enum FormStatus {
  ACTIVE
  INACTIVE
  DRAFT
}

enum SubmissionStatus {
  NEW
  READ
  COMPLETED
}